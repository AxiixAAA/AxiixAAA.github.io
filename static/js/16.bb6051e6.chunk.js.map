{"version":3,"sources":["hoc/withAuthRedirect.js","commponents/Dialogs/InputField/InputField.module.css","redux/selectors/authSelector.ts","redux/selectors/dialogsSelector.ts","redux/selectors/userProfileSelector.ts","commponents/Dialogs/InputField/InputField.tsx","commponents/Dialogs/Messages/Messages.tsx","commponents/Dialogs/Opponents/Opponents.tsx","commponents/Dialogs/Dialogs.jsx","commponents/Dialogs/DialogsContainer.tsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","module","exports","getAuthUserId","userId","getOpponentsSelector","dialogsPage","opponents","getOpponentMessagesSelector","messages","getCurrentOpponentSelector","currentOpponent","getUserProfileSelector","profilePage","profile","useStyles","makeStyles","theme","footerMessages","height","width","background","palette","paper","marginBottom","borderRadius","display","justifyContent","alignItems","margin","InputField","classes","dispatch","useDispatch","initialValues","textarea","onSubmit","values","resetForm","sendMessage","id","className","styles","form","type","name","placeholder","input","autocomplete","Box","wrapper","padding","backgroundColor","overflowY","overflowX","position","boxShadow","boxShadowSearch","messageWrapper","gap","message","marginRight","overflowWrap","photo","marginTop","verticalAlign","senderName","color","fontSize","chooseOpponent","headerMessages","Messages","authProfile","console","log","divRef","useRef","useEffect","current","scrollIntoView","scrollToBottom","src","photos","small","userImage","alt","userName","map","m","photoWrapper","senderId","body","ref","backgroundHover","opponent","cursor","Opponents","o","onClick","getDialogWithOpponent","actionCreators","setCurrentOpponent","dialogs","dialogList","marginLeft","Dialogs","useSelector","authId","getDialogsOpponents","getUserProfile","memo","compose"],"mappings":"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","file":"static/js/16.bb6051e6.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router\";\r\n\r\n// 2я контейнерная компонента\r\n// конект к стору и забираем значение isAuth\r\nlet mapStateToPropsForRedirect = (state) => ({ isAuth: state.auth.isAuth });\r\n\r\n// 1я контейнерная компонента\r\n// Функция, которая принимает на входе component --> типа пропс\r\nexport const withAuthRedirect = (Component) => {\r\n    // создаём класс \r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            // задаём логику редиректа\r\n            if (!this.props.isAuth) return <Redirect to=\"/login\"/> \r\n            // перерисовываем целевую компоненту которую нам на фходе подадут \r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n\r\n    \r\n    let  ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"InputField_form__spXn5\",\"input\":\"InputField_input__3ez0K\",\"button\":\"InputField_button__33qzT\"};","import { TGlobalState } from \"../reduxStore\";\r\n\r\n// export const getIsLogged = (state: TGlobalState) => state.auth.isLogged;\r\n// export const getErrorMessage = (state: TGlobalState) => state.auth.errorMessage;\r\n// export const getCaptchaURL = (state: TGlobalState) => state.auth.captchaURL;\r\n// export const getAuthData = (state: TGlobalState) => state.auth;\r\nexport const getAuthUserId = (state: TGlobalState) => state.auth.userId\r\n// export const getNavMenuSelector = (state: TGlobalState) => state.auth.isNavMenu","import { TGlobalState } from \"../reduxStore\";\r\n\r\nexport const getOpponentsSelector = (state: TGlobalState) => state.dialogsPage.opponents\r\nexport const getOpponentMessagesSelector = (state: TGlobalState) => state.dialogsPage.messages\r\nexport const getCurrentOpponentSelector = (state: TGlobalState) => state.dialogsPage.currentOpponent","import { TGlobalState } from \"../reduxStore\";\r\n\r\nexport const getUserProfileSelector = (state: TGlobalState) => state.profilePage.profile;\r\nexport const getStatus = (state: TGlobalState) => state.profilePage.status;\r\nexport const getUserId = (state: TGlobalState)=> state.profilePage.profile?.userId;\r\n","import { Box } from \"@mui/material\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { Field, Form, Formik } from \"formik\";\r\nimport React, { FC } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { TOpponent } from \"../../../api/dialogs\";\r\nimport { sendMessage } from \"../../../redux/dialogs-reducer\";\r\nimport styles from \"./InputField.module.css\";\r\n\r\nconst useStyles: any = makeStyles((theme: any) => ({\r\n    footerMessages: {\r\n        height: \"50px\",\r\n        width: \"100%\",\r\n        background: theme.palette.background.paper,\r\n        marginBottom: \"15px\",\r\n        borderRadius: \"8px 8px 8px 8px\",\r\n        display: \"flex\",\r\n        justifyContent: \"space-around\",\r\n        alignItems: \"center\",\r\n        margin: '10px 0px 0px 0px'    \r\n      },\r\n}));\r\n\r\nexport const InputField: FC<TProps> = ({ currentOpponent }) => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch()\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                textarea: ''\r\n            }}\r\n            onSubmit={(values, { resetForm }) => {\r\n                dispatch(sendMessage(currentOpponent.id, values.textarea))\r\n                resetForm({})\r\n            }}>\r\n            {currentOpponent.id\r\n                ? <Form className={styles.form}>\r\n                    <Field\r\n                        type='textarea'\r\n                        name='textarea'\r\n                        placeholder=\"Введите сообщение...\"\r\n                        className={styles.input} \r\n                        autocomplete=\"off\"\r\n                    />\r\n                    {/* <button type='submit' className={styles.button}>Отправить</button> */}\r\n                </Form>\r\n                : <Box className={classes.footerMessages} />\r\n            }\r\n        </Formik>\r\n    )\r\n}\r\n\r\n\r\ntype TProps = {\r\n    currentOpponent: TOpponent\r\n}","import { Box } from \"@mui/material\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport React, { FC, useEffect, useRef } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { TOpponent, TOpponentMessages } from \"../../../api/dialogs\";\r\nimport userImage from \"../../../assets/images/user.png\";\r\nimport { TUserProfile } from \"../../../type/types\";\r\n\r\ntype Theme = {\r\n  palette: any;\r\n};\r\nconst useStyles: any = makeStyles((theme: Theme) => ({\r\n  wrapper: {\r\n    height: \"68vh\",\r\n    padding: \"10px 15px\",\r\n    backgroundColor: theme.palette.background.paper,\r\n    borderRadius: \"8px\",\r\n    overflowY: \"auto\",\r\n    overflowX: \"hidden\",\r\n    width: \"535px\",\r\n    position: \"relative\",\r\n    // margin: '0px 0px 0px 0px'\r\n    // >>>>>>>>>>>>>>>>>\r\n    // border: \"2px solid red\",\r\n    // >>>>>>>>>>>>>>>>>\r\n    boxShadow: theme.palette.boxShadowSearch,\r\n  },\r\n  messageWrapper: {\r\n    padding: \"5px\",\r\n    display: \"flex\",\r\n    alignItems: \"flex-start\",\r\n    gap: \"20px\",\r\n  },\r\n\r\n  message: {\r\n    width: \"370px\",\r\n    margin: \"0\",\r\n    marginRight: \"20px\",\r\n    padding: \"0\",\r\n    overflowWrap: \"break-word\",\r\n  },\r\n\r\n  photo: {\r\n    marginTop: \"5px\",\r\n    borderRadius: \"50%\",\r\n    verticalAlign: \"middle\",\r\n  },\r\n\r\n  senderName: {\r\n    margin: \"0\",\r\n    padding: \"0\",\r\n    color: \"#F53838\",\r\n    fontSize: \"20px\",\r\n  },\r\n\r\n  chooseOpponent: {\r\n    color: \"var(--font-grey-disactive)\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    marginTop: \"60%\",\r\n  },\r\n\r\n  headerMessages: {\r\n    height: \"50px\",\r\n    width: \"100%\",\r\n    background: theme.palette.background.paper,\r\n    marginBottom: \"15px\",\r\n    borderRadius: \"8px 8px 8px 8px\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n\r\n    \"& > div\": {\r\n      display: \"flex\",\r\n    },\r\n    // photos.small\r\n    \"& > div > img\": {\r\n      borderRadius: \"50%\",\r\n      width: \"40px\",\r\n      height: \"40px\",\r\n      margin: \"0px 15px 0px 10px\",\r\n\r\n    },\r\n  },\r\n}));\r\n\r\nexport const Messages: FC<TProps> = ({\r\n  messages,\r\n  currentOpponent,\r\n  authProfile,\r\n}) => {\r\n    console.log(messages);\r\n    \r\n  const classes = useStyles();\r\n  const divRef = useRef<HTMLDivElement>(null);\r\n\r\n  const scrollToBottom = () => {\r\n    divRef.current?.scrollIntoView(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [messages]);\r\n\r\n  return (\r\n    <>\r\n      <Box className={classes.headerMessages}>\r\n        {currentOpponent.id ? (\r\n          <Box>\r\n            <img\r\n              src={currentOpponent.photos.small || userImage}\r\n              alt=\"фото пользователя\"\r\n            />\r\n            <Box>{currentOpponent.userName}</Box>\r\n          </Box>\r\n        ) : null}\r\n      </Box>\r\n\r\n      <Box className={classes.wrapper}>\r\n        {currentOpponent.id ? (\r\n          messages.map((m) => {\r\n            return (\r\n              <Box key={m.id} className={classes.messageWrapper}>\r\n                <Box className={classes.photoWrapper}>\r\n                  <Link to={`/profile/${m.senderId}`}>\r\n                    <img\r\n                      src={\r\n                        currentOpponent.id === m.senderId\r\n                          ? currentOpponent.photos.small || userImage\r\n                          : authProfile.photos.small || userImage\r\n                      }\r\n                      alt=\"фото пользователя\"\r\n                      width=\"50px\"\r\n                      className={classes.photo}\r\n                    />\r\n                  </Link>\r\n                </Box>\r\n                <Box>\r\n                  <p className={classes.senderName}>{m.senderName}</p>\r\n                  <p className={classes.message}>{m.body}</p>\r\n                </Box>\r\n              </Box>\r\n            );\r\n          })\r\n        ) : (\r\n          <Box className={classes.chooseOpponent}>Выберите собеседника</Box>\r\n        )}\r\n\r\n        <Box ref={divRef}></Box>\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n\r\ntype TProps = {\r\n  messages: TOpponentMessages[];\r\n  currentOpponent: TOpponent;\r\n  authProfile: TUserProfile;\r\n};\r\n","import React, { FC } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { TOpponent } from \"../../../api/dialogs\";\r\nimport {\r\n  actionCreators,\r\n  getDialogWithOpponent,\r\n} from \"../../../redux/dialogs-reducer\";\r\nimport userImage from \"../../../assets/images/user.png\";\r\nimport { makeStyles } from \"@mui/styles\";\r\n\r\nconst useStyles: any = makeStyles((theme: any) => ({\r\n    wrapper:{\r\n        height: '83vh',\r\n        overflowY: 'auto',\r\n        overflowX: 'hidden',\r\n        '& :hover':{\r\n            backgroundColor: theme.palette.background.backgroundHover,\r\n        }\r\n    },\r\n    opponent:{\r\n        marginBottom: '10px',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        gap: '10px',\r\n        borderRadius: '8px',\r\n        padding: '5px',\r\n        cursor: 'pointer',\r\n        // boxShadow: theme.palette.boxShadow,\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n    name:{\r\n        margin: '0',\r\n    },\r\n    photo:{\r\n        borderRadius: '50%',\r\n    },\r\n\r\n}));\r\n\r\nexport const Opponents: FC<TProps> = ({ opponents }) => {\r\n    \r\n  const classes = useStyles();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const handleClick = (opponent: TOpponent) => {\r\n    dispatch(getDialogWithOpponent(opponent.id));\r\n    dispatch(actionCreators.setCurrentOpponent(opponent));\r\n  };\r\n\r\n  return (\r\n    <div className={classes.wrapper}>\r\n      {opponents.map((o) => {\r\n        return (\r\n          <div\r\n            key={o.id}\r\n            onClick={() => handleClick(o)}\r\n            className={classes.opponent}\r\n          >\r\n            <img\r\n              src={o.photos.small || userImage}\r\n              alt={o.userName}\r\n              className={classes.photo}\r\n              width=\"50px\"\r\n            />\r\n            <p className={classes.name}>{o.userName}</p>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\ntype TProps = {\r\n  opponents: TOpponent[];\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getDialogsOpponents } from \"../../redux/dialogs-reducer\";\r\nimport { getUserProfile } from \"../../redux/profile-reducer\";\r\nimport { getAuthUserId } from \"../../redux/selectors/authSelector\";\r\nimport {\r\n  getCurrentOpponentSelector,\r\n  getOpponentMessagesSelector,\r\n  getOpponentsSelector,\r\n} from \"../../redux/selectors/dialogsSelector\";\r\nimport { getUserProfileSelector } from \"../../redux/selectors/userProfileSelector\";\r\nimport { InputField } from \"./InputField/InputField\";\r\nimport { Messages } from \"./Messages/Messages\";\r\nimport { Opponents } from \"./Opponents/Opponents\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { Box } from \"@mui/material\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  dialogs: {\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n    color: \"var(--font-grey)\",\r\n    width: \"100%\",\r\n    // border: \"1px solid green\",\r\n  },\r\n  dialogList: {\r\n    width: \"200px\",\r\n    overflowY: \"auto\",\r\n    overflowX: \"hidden\",\r\n\r\n    // >>>>>>>>>>>>>>>>>\r\n    // border: \"2px solid green\",\r\n    // >>>>>>>>>>>>>>>>>\r\n  },\r\n  messages: {\r\n    marginLeft: \"10px\",\r\n  },\r\n \r\n}));\r\n\r\nconst Dialogs = () => {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const authProfile = useSelector(getUserProfileSelector);\r\n  const currentOpponent = useSelector(getCurrentOpponentSelector);\r\n  const messages = useSelector(getOpponentMessagesSelector);\r\n  const opponents = useSelector(getOpponentsSelector);\r\n  const authId = useSelector(getAuthUserId);\r\n  useEffect(() => {\r\n    dispatch(getDialogsOpponents());\r\n    dispatch(getUserProfile(authId));\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n  return (\r\n    <Box className={classes.dialogs}>\r\n      <Box className={classes.dialogList}>\r\n        <Opponents opponents={opponents} />\r\n      </Box>\r\n      <Box className={classes.messages}>\r\n        <Messages\r\n          messages={messages}\r\n          currentOpponent={currentOpponent}\r\n          authProfile={authProfile}\r\n        />\r\n          <InputField currentOpponent={currentOpponent} />\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default React.memo(Dialogs);\r\n","// import { actions } from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport { connect } from \"react-redux\";\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\nimport { compose } from \"redux\";\r\nimport { TGlobalState } from \"../../redux/reduxStore\";\r\n\r\nlet mapStateToProps = (state: TGlobalState) => {\r\n  return {\r\n    dialogsPage: state.dialogsPage,\r\n  };\r\n};\r\n\r\nexport default compose(\r\n  connect(mapStateToProps),\r\n  // Защита~Редирект, от незарегистрированного пользователя\r\n  withAuthRedirect\r\n)(Dialogs);\r\n"],"sourceRoot":""}