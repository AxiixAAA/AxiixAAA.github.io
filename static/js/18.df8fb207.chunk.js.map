{"version":3,"sources":["pages/chat/AddMessageForm.tsx","pages/chat/style.ts","pages/chat/Message.tsx","pages/chat/Messages.tsx","pages/chat/Chat.tsx","pages/chat/ChatPage.tsx"],"names":["useStyles","makeStyles","theme","AddMessageForm","width","marginLeft","margin","backgroundColor","palette","background","paper","borderRadius","border","boxShadow","padding","fontSize","fontFamily","color","buttonEnd","cursor","containerAddMessageForm","minHeight","display","alignItems","justifyContent","position","left","bottom","classes","useState","message","setMessage","dispatch","useDispatch","Box","className","TextField","multiline","autoFocus","maxRows","value","onChange","e","currentTarget","fullWidth","placeholder","InputProps","endAdornment","InputAdornment","onClick","sendMessage","React","memo","useMessagesStyles","ContainerMessagesMUI","styled","overflowY","height","paddingBottom","ContainerMessageMUI","MessageuserDivideMUI","flexDirection","MessagePhotoMUI","MessageuserNameMUI","MessageNewMessageMUI","maxWidth","text","primary","wordBreak","Message","to","userId","src","photo","userName","Messages","messages","useSelector","state","chat","messagesAnchorRef","useRef","useEffect","current","scrollIntoView","map","m","index","ref","Chat","status","startMessagesListening","stopMessagesListening","ChatPage","getIsAuth","style"],"mappings":"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","file":"static/js/18.df8fb207.chunk.js","sourcesContent":["import { Box, InputAdornment, TextField } from \"@mui/material\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { sendMessage } from \"../../redux/chat-reducer\";\r\nimport SendIcon from \"@mui/icons-material/Send\";\r\n\r\ntype Theme = {\r\n  palette: any;\r\n};\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  AddMessageForm: {\r\n  width:'90%',\r\n  marginLeft:'-5%',\r\n\r\n    \"& .MuiTextField-root\": {\r\n        // width: '100wh',\r\n        \r\n      margin: \"15px\",\r\n      backgroundColor: theme.palette.background.paper,\r\n      borderRadius: \"8px\",\r\n      border: \"none\",\r\n      boxShadow: theme.palette.boxShadow,\r\n\r\n      \"& .MuiOutlinedInput-root\": {\r\n        padding: \"9px 0px 10px 13px\",\r\n      },\r\n      \"& .MuiOutlinedInput-input\": {\r\n        fontSize: \"14px\",\r\n        fontFamily: \"monospace\",\r\n      },\r\n      \"& .MuiOutlinedInput-notchedOutline\": {\r\n        border: \"none\",\r\n        // boxShadow: theme.palette.boxShadow,\r\n      },\r\n\r\n      \"& .MuiInputAdornment-root\": {\r\n        color: theme.palette.background.buttonEnd,\r\n        cursor: \"pointer\",\r\n      },\r\n    },\r\n  },\r\n  containerAddMessageForm: {\r\n    minHeight: \"70px\",\r\n    width: \"100%\",\r\n    boxShadow: theme.palette.boxShadow,\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: 'center',\r\n    backgroundColor: theme.palette.background.paper,\r\n    borderRadius: \"20px 20px 0px 0px\",\r\n    position: \"absolute\",\r\n    left: \"0\",\r\n    bottom: \"0\",\r\n  },\r\n}));\r\n\r\n// wrap=\"soft\r\n// ФОРМА\r\nconst AddMessageForm: React.FC<{}> = () => {\r\n  const classes = useStyles();\r\n\r\n  //   const {\r\n  //     AddMessageFormMUI\r\n  //   } = useMessagesStyles();\r\n\r\n  const [message, setMessage] = useState(\"\");\r\n  const dispatch = useDispatch();\r\n\r\n  const sendMessageHandler = () => {\r\n    if (!message) {\r\n      return;\r\n    }\r\n    dispatch(sendMessage(message));\r\n    setMessage(\"\");\r\n  };\r\n\r\n  return (\r\n    <Box className={classes.containerAddMessageForm}>\r\n      <Box className={classes.AddMessageForm}>\r\n        <TextField\r\n          multiline\r\n          autoFocus\r\n          maxRows={4}\r\n          value={message}\r\n          onChange={(e) => setMessage(e.currentTarget.value)}\r\n          fullWidth\r\n          placeholder=\"Напишите что-нибудь...\"\r\n          InputProps={{\r\n            endAdornment: (\r\n              <InputAdornment position=\"start\">\r\n                <SendIcon onClick={sendMessageHandler} />\r\n              </InputAdornment>\r\n            ),\r\n          }}\r\n        />\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\nexport default React.memo(AddMessageForm);\r\n","import { styled } from \"@mui/material\";\r\n\r\nexport const useMessagesStyles = () => {\r\n  const ContainerMessagesMUI = styled(\"div\")(({ theme }) => ({\r\n    padding: \"15px\",\r\n    color: \"white\",\r\n    overflowY: \"auto\",\r\n    height: \"83vh\",\r\n    borderRadius: \"20px 4px 4px 20px\",\r\n    boxShadow: \"0px 0px 2px wheat\",\r\n    backgroundColor: theme.palette.background.paper,\r\n    paddingBottom: '80px',\r\n    \r\n    //  фон самого скроллбара\r\n    \"&::-webkit-scrollbar\": {\r\n      width: \"0.4em\",\r\n    },\r\n    // пустое пространство под индикатором прокрутки\r\n    \"&::-webkit-scrollbar-track\": {\r\n      backgroundColor: \"#247881\",\r\n      borderRadius: \"0px 10px 10px 0px\",\r\n    },\r\n    // индикатор прокрутки, перетаскиваемый элемент.\r\n    \"&::-webkit-scrollbar-thumb\": {\r\n      backgroundColor: \"#ff0036\",\r\n      borderRadius: \"0px 10px 10px 0px\",\r\n    },\r\n  }));\r\n\r\n  const ContainerMessageMUI = styled(\"div\")(({ theme }) => ({\r\n    display: \"flex\",\r\n    margin: \"10px 0px\",\r\n  }));\r\n\r\n  const MessageuserDivideMUI = styled(\"div\")(({ theme }) => ({\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n  }));\r\n\r\n  const MessagePhotoMUI = styled(\"div\")(({ theme }) => ({\r\n    \"& > img\": {\r\n      width: \"50px\",\r\n      height: \"50px\",\r\n      borderRadius: \"100%\",\r\n      margin: \"0px 5px 0px 0px\",\r\n    },\r\n  }));\r\n  const MessageuserNameMUI = styled(\"div\")(({ theme }) => ({\r\n    color: \"#ff0036\",\r\n  }));\r\n  const MessageNewMessageMUI = styled(\"div\")(({ theme }) => ({\r\n    maxWidth: \"387px\",\r\n    color: theme.palette.text.primary,\r\n    wordBreak: \"break-word\",\r\n  }));\r\n\r\n\r\n  // \t[theme.breakpoints.down(1025)]: {\r\n  // \t\tmarginBottom: '32px'\r\n  // \t}\r\n \r\n\r\n  return {\r\n    ContainerMessagesMUI,\r\n    ContainerMessageMUI,\r\n    MessageuserDivideMUI,\r\n    MessagePhotoMUI,\r\n    MessageuserNameMUI,\r\n    MessageNewMessageMUI,\r\n   \r\n  };\r\n};\r\n","/* eslint-disable jsx-a11y/alt-text */\r\nimport React, { FC } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { ChatMessageType } from \"./ChatPage\";\r\nimport { useMessagesStyles } from \"./style\";\r\n\r\n// СООБЩЕНИЕ\r\nconst Message: FC<{ message: ChatMessageType }> = ({ message }) => {\r\n  const {\r\n    ContainerMessageMUI,\r\n    MessageuserDivideMUI,\r\n    MessagePhotoMUI,\r\n    MessageuserNameMUI,\r\n    MessageNewMessageMUI,\r\n  } = useMessagesStyles();\r\n  \r\n  return (\r\n    <>\r\n      <ContainerMessageMUI>\r\n        <NavLink to={\"/profile/\" + message.userId}>\r\n          <MessagePhotoMUI>\r\n            <img src={message.photo} />\r\n          </MessagePhotoMUI>\r\n        </NavLink>\r\n        <MessageuserDivideMUI>\r\n          <NavLink to={\"/profile/\" + message.userId}>\r\n            <MessageuserNameMUI>{message.userName}</MessageuserNameMUI>\r\n          </NavLink>\r\n          <MessageNewMessageMUI>{message.message}</MessageNewMessageMUI>\r\n        </MessageuserDivideMUI>\r\n      </ContainerMessageMUI>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default React.memo(Message);\r\n\r\n// const prevCount = usePrevious({ message });\r\n\r\n// // Hook\r\n// function usePrevious(value: any) {\r\n//   // The ref object is a generic container whose current property is mutable ...\r\n//   // ... and can hold any value, similar to an instance property on a class\r\n//   const ref = useRef();\r\n//   // Store current value in ref\r\n//   useEffect(() => {\r\n//     ref.current = value;\r\n//   }, [value]); // Only re-run if value changes\r\n//   // Return previous value (happens before update in useEffect above)\r\n//   return ref.current;\r\n// }\r\n","import React, { FC, useEffect, useRef } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport { TGlobalState } from \"../../redux/reduxStore\";\r\nimport Message from \"./Message\";\r\nimport { useMessagesStyles } from \"./style\";\r\n\r\n// CООБЩЕНИЯ\r\nconst Messages: FC = () => {\r\n  const { ContainerMessagesMUI } = useMessagesStyles();\r\n\r\n  const messages = useSelector((state: TGlobalState) => state.chat.messages);\r\n  const messagesAnchorRef = useRef<HTMLDivElement>(null);\r\n\r\n  useEffect(() => {\r\n    messagesAnchorRef.current?.scrollIntoView(true);\r\n  }, [messages]);\r\n\r\n  return (\r\n    <>\r\n      <ContainerMessagesMUI >\r\n        {messages.map((m, index) => (\r\n          <Message key={index} message={m} />\r\n        ))}\r\n        <div ref={messagesAnchorRef}></div>\r\n      </ContainerMessagesMUI>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default React.memo(Messages);\r\n","import React, { FC, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  startMessagesListening,\r\n  stopMessagesListening,\r\n} from \"../../redux/chat-reducer\";\r\nimport { TGlobalState } from \"../../redux/reduxStore\";\r\nimport Messages from \"./Messages\";\r\n\r\n// ЧАТ\r\nconst Chat: FC = () => {\r\n  const dispatch = useDispatch();\r\n  const status = useSelector((state: TGlobalState) => state.chat.status);\r\n\r\n  useEffect(() => {\r\n    dispatch(startMessagesListening());\r\n    return () => {\r\n      dispatch(stopMessagesListening());\r\n    };\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {status === \"error\" && (\r\n        <div>Some error occured. Please refresh the page</div>\r\n      )}\r\n      <Messages />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default React.memo(Chat);\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { getIsAuth } from \"../../redux/users-selectors\";\r\nimport AddMessageForm from \"./AddMessageForm\";\r\nimport Chat from \"./Chat\";\r\n\r\n\r\n// ТИП ЧАТА\r\nexport type ChatMessageType = {\r\n  message: string;\r\n  photo: string;\r\n  userId: number;\r\n  userName: string;\r\n};\r\n\r\n// СТРАНИЦА ЧАТА\r\nconst ChatPage: React.FC = () => {\r\n\r\n    const isAuth = useSelector(getIsAuth)\r\n\r\n    if (!isAuth) {\r\n        return <Redirect to={\"/login\"} />;\r\n    }\r\n  return (\r\n    <>\r\n      <div style={{ color: \"white\", position: 'relative', minHeight: '100%'}}>\r\n        <Chat />\r\n        <AddMessageForm/>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default React.memo(ChatPage)\r\n\r\n"],"sourceRoot":""}